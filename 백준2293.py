#백준 2293
'''
25.02.22. 17:00 start

dp문제의 접근. 
경우의 수를 구하는 것에 배열을 활용해 저장을 한다. 
경우를 구하는 것에 대한 접근.

1. 사용가능한 것을 탐색하면서.
2. 그 것으로 만들어질 수 있는 값들을 구한다.

dp문제
합으로 k가 나오는 모든 경우 구하기.
합이 x 일때의 모든 경우 

1 2 5
10 
10개 썼을때의 경우
커지는 순간 x
곱으로 표현되야한다. 
n개 사용했을때 가치가 w이다. 
가치가 1일때 
동전 한계 수가 정해져있고 
가치에 따라 보기. 
가치의 합이 1일때, 경우
가치의 합이 2일때 경우 
'''
n, k = map(int, input().split())  # 동전 종류 수, 목표 금액
coins = [int(input()) for _ in range(n)]  # 동전 종류 입력

# DP 테이블 초기화
dp = [0] * (k + 1)
dp[0] = 1  # 0원을 만드는 방법은 1가지

# dp[x] # x를 만드는 경우의 수 
# dp[x-y] 를 해당 코인에 더한다 => 해당 코인을 더하게 되면 나오는 수.
'''
1 + 2
2 + 2
3 + 2
4 + 2
5 + 2
6 + 2
특정 동전만을 사용해서 만들 수 있는 경우들, 나머지 동전들을 사용해서 만들 수 있는 경우들.
=> 동전들을 활용해서 만들 수 있는 경우

j - coin
'''

# 경우의 수들을 모두 더함.

# 각 동전에 대해 DP 배열 갱신
for coin in coins: # 모든 동전에 대하여. 
    for j in range(coin, k + 1): # 그 동전을 사용하였을 때 
        dp[j] += dp[j - coin]

# 결과 출력
print(dp[k])



